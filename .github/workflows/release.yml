name: ðŸš€Release
run-name: ${{ vars.PROJECT_NAME }} ${{ inputs.release-type }} Release ${{ inputs.dry-run == true && '(Dry Run)' || '' }}


defaults:
  run:
    shell: pwsh


on:
  workflow_dispatch:
    inputs:
      release-type:
        description: The type of release.  Choose 'Preview' or 'Production'.
        required: true
        type: choice
        options: [Preview, Production]
      dry-run:
        required: false
        description: If true, the release will not be created.
        default: false
        type: boolean


jobs:
  get_version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Version
        id: get_version
        run: |
          $scriptPath = "${{ github.workspace }}/.github/cicd/scripts/get-version.ts";

          deno run --allow-read --allow-write --allow-env "$scriptPath";


  validate_release:
    name: Validate Workflow Inputs
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - name: Validate Workflow Inputs
        run: |
          $branch = "${{ github.ref }}".TrimStart('refs/heads/');
          $expectedPrevBranch = "${{ vars.PREV_RELEASE_BRANCH }}".Trim();
          $expectedProdBranch = "${{ vars.PROD_RELEASE_BRANCH }}".Trim();

          if ($expectedPrevBranch -eq "") {
            Write-Host "::error::The PREV_RELEASE_BRANCH variable is not set.";
            exit 1;
          }

          if ($expectedProdBranch -eq "") {
            Write-Host "::error::The PROD_RELEASE_BRANCH variable is not set.";
            exit 1;
          }

          if ($branch -ne $expectedPrevBranch -and $branch -ne $expectedProdBranch) {
            Write-Host "::error::Releases are only allowed to be run on '$expectedPrevBranch' or '$expectedProdBranch' branches.";
            exit 1;
          }

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Version Does Not Exist
        run: |
          $scriptPath = "${{ github.workspace }}/.github/cicd/scripts/version-checker.ts";

          deno run `
            --allow-net `
            --allow-read `
            "$scriptPath" `
            "${{ vars.ORGANIZATION_NAME }}" `
            "${{ vars.PROJECT_NAME }}" `
            "${{ inputs.release-type }}" `
            "${{ needs.get_version.outputs.version }}" `
            "${{ secrets.CICD_TOKEN }}";

      - name: Release Notes Exist
        run: |
          $scriptPath = "${{ github.workspace }}/.github/cicd/scripts/check-release-notes.ts";

          deno run `
            --allow-read `
            "$scriptPath" `
            "${{ inputs.release-type }}" `
            "${{ needs.get_version.outputs.version }}";


  release:
    name: Run ${{ inputs.release-type }} Release
    runs-on: ubuntu-latest
    needs: [get_version, validate_release]
    steps:
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Build
        run: deno run --allow-read --allow-run ./.github/cicd/scripts/deno-check.ts

      - name: Run Lint
        run: deno lint

      - name: Run Tests
        run: deno test --allow-read ./tests/*Tests.ts;

      - name: Creating ${{ inputs.release-type }} GitHub Release
        if: ${{ inputs.dry-run == false }}
        uses: softprops/action-gh-release@v2
        with: 
          name: "ðŸš€${{ inputs.release-type }} Release - ${{ needs.get_version.outputs.version }}" 
          body_path: "${{ github.workspace }}/ReleaseNotes/${{ inputs.release-type }}Releases/Release-Notes-${{ needs.get_version.outputs.version }}.md"
          files: "${{ github.workspace }}/ReleaseNotes/${{ inputs.release-type }}Releases/Release-Notes-${{ needs.get_version.outputs.version }}.md"
          tag_name: "${{ needs.get_version.outputs.version }}"
          prerelease: ${{ inputs.release-type == 'Preview' }}
          draft: false

      - name: Close Milestone ${{ needs.get_version.outputs.version }}
        if: ${{ inputs.dry-run == false }}
        run: |
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/").Replace("//", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $scriptUrl;
          $scriptUrl = "$scriptUrl/close-milestone.ts";

          Write-Host "::notice::Close milestone script URL: $scriptUrl";

          <# Deno Args:
            1. Project name
            2. Milestone name - This is the version
            3. PAT
          #>
          deno run `
            --allow-read --allow-net `
            "$scriptUrl" `
            "${{ vars.PROJECT_NAME }}" `
            "${{ needs.get_version.outputs.version }}" `
            "${{ secrets.CICD_TOKEN }}";

      - name: Send X Announcement
        run: |
          # Construct the URL to the organizations CICD scripts
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/").Replace("//", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $url;

          <# Deno Args:
            1. Repo owner
            2. Project name
            3. Version
            4. Twitter consumer api key
            5. Twitter consumer api secret
            6. Twitter access token
            7. Twitter access token secret
            8. PAT
          #>
          deno run `
            --allow-read --allow-net --allow-env `
            "$scriptUrl" `
            "${{ vars.ORGANIZATION_NAME }}" `
            "${{ vars.PROJECT_NAME }}" `
            "${{ needs.get_version.outputs.version }}" `
            "${{ secrets.TWITTER_CONSUMER_API_KEY }}" `
            "${{ secrets.TWITTER_CONSUMER_API_SECRET }}" `
            "${{ secrets.TWITTER_ACCESS_TOKEN }}" `
            "${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}" `
            "${{ secrets.CICD_TOKEN }}";
